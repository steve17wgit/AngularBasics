
@{
    ViewData["Title"] = "Modules";
}
<script src="~/lib/angular/angular.min.js" type="text/javascript"></script>
<script src="~/js/myApp.js" type="text/javascript"></script>
<script src="~/js/myCtrl.js" type="text/javascript"></script>

@*<script>

        var app = angular.module("myApp", []);

        app.controller("myCtrl", function ($scope) {
            $scope.firstName = "John";
            $scope.lastName = "Doe";
        });

    </script>

    <h2>Modules</h2>
    <div ng-app="myApp" ng-controller="myCtrl">
        {{ firstName + " " + lastName }}
    </div>*@


@*<div ng-app="myApp" w3-test-directive></div>
    <script>
        var app = angular.module("myApp", []);

        app.directive("w3TestDirective", function () {
            return {
                template: "I was made in a directive constructor!"
            };
        });
    </script>*@

<div ng-app="myApp" ng-controller="myCtrl">
    {{ firstName + " " + lastName }}
</div>

<script src="myApp.js"></script>
<script src="myCtrl.js"></script>



@*
        AngularJS Modules
            - An AngularJS module defines an application.
            - The module is a container for the different parts of an application.
            - The module is a container for the application controllers.
            - Controllers always belong to a module.

        Creating a Module
        - The "myApp" parameter refers to an HTML element in which the application will run.

        <script>
            var app = angular.module("myApp", []);
        </script>

        <div ng-app="myApp">...</div>

        Adding a Controller
            - Add a controller to your application, and refer to the controller with the ng-controller directive
            <div ng-app="myApp" ng-controller="myCtrl">

        Adding a Directive
            - AngularJS has a set of built-in directives which you can use to add functionality to your application.
             https://www.w3schools.com/angular/angular_ref_directives.asp

        Modules and Controllers in Files
            - It is common in AngularJS applications to put the module and the controllers in JavaScript files.
            <script src="myApp.js"></script>
            <script src="myCtrl.js"></script>

        Functions can Pollute the Global Namespace
            Global functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.
            AngularJS modules reduces this problem, by keeping all functions local to the module.

        When to Load the Library
            While it is common in HTML applications to place scripts at the end of the <body> element, it is recommended that you load the AngularJS library either in the <head> or at the start of the <body>.
            This is because calls to angular.module can only be compiled after the library has been loaded.

*@